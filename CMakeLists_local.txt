## Project Setting
cmake_minimum_required(VERSION 3.14)
project(Sabre LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "Build type not set - defaulting to Release")
    set(CMAKE_BUILD_TYPE Release)
endif()


# Python Setting
set(Python_FIND_STRATEGY LOCATION)
set(Python_ROOT_DIR /Users/air/anaconda3/envs/quantum)
find_package(Python 3.10 COMPONENTS Interpreter Development REQUIRED)

# Boost lib
set(Boost_ROOT "/opt/homebrew/opt/boost")
find_package(Boost REQUIRED)
if (Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    MESSAGE( STATUS "Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS}.")
endif()

# Graphviz lib
set(Graphviz_INCLUDE_DIRS "/opt/homebrew/Cellar/graphviz/10.0.1/include/")
include_directories(${Graphviz_INCLUDE_DIRS})
link_directories("/opt/homebrew/Cellar/graphviz/10.0.1/lib")


include_directories("extern/pybind11/include")

include_directories(
    "include" 
    "include/DAG" 
    "include/Vis"
    "include/Model"
)

##! Test CPP  设置包含src目录下除了binding.cpp之外的所有文件
file(GLOB SOURCES "src/*.cpp")
list(FILTER SOURCES EXCLUDE REGEX "src/binding.cpp")
file(GLOB DAG_SOURCES "src/DAG/*.cpp")
file(GLOB Vis_SOURCES "src/Vis/*.cpp")
file(GLOB Model_SOURCES "src/Model/*.cpp")

add_executable(
    sabre_test 
        ${SOURCES} 
        ${DAG_SOURCES}
        ${Model_SOURCES}
)
target_link_libraries(sabre_test ${Boost_LIBRARIES}) # Boost

option(BUILD_VIS "Build the Vis module for cpp test" ON)
if(BUILD_VIS)
    add_compile_definitions(-DVIS)
    target_sources(sabre_test PRIVATE ${Vis_SOURCES})
    target_link_libraries(sabre_test gvc cgraph)         # Graphviz
endif()



## Pybind For Python Binding.
add_subdirectory("extern/pybind11")
pybind11_add_module(
    sabre 
        src/binding.cpp 
        ${SOURCES} 
        ${DAG_SOURCES}
        ${Model_SOURCES}
)
target_link_libraries(sabre PRIVATE ${Boost_LIBRARIES}) # Boost
